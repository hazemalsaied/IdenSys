import json
import os


class XPParams:
    realExper = False
    includeEmbedding = True
    useCrossValidation = False
    useAutoGeneratedPOS = True
    useAutoGeneratedDEP = True
    baseline = True


class PrintParams:
    createDictionary = False
    printReport = True
    printSentsWithEmbeddedMWEs = False
    printFeaturesOfSent = False


class Paths:
    xpName = ''
    languageName = ''
    projectPath = os.path.dirname(__file__)[:-len(os.path.basename(os.path.dirname(__file__)))]
    configsFolder = os.path.join(projectPath, 'Config')
    xpsReadMeFile = os.path.join(projectPath, "Results/readMe.md")
    evalResultsFile = os.path.join(projectPath, "Results/results.csv")
    corpusPath = os.path.join(projectPath, "sharedtask/")
    xpPath = os.path.join(projectPath, "Results/")
    langResultFolder = os.path.join(projectPath, "Results/")
    rootResultFolder = os.path.join(projectPath, "Results/")



class FeatParams:
    usePreciseDictionary = False

    # Featue extraction parameters
    useFirstBufferElement = True
    useSecondBufferElement = True
    useToken = True
    useLemma = True
    usePOS = True
    useBiGram = True
    useTriGram = True
    useDistance = True
    useSyntax = True

    generateS0B2Bigram = True
    useDictionary = True

    historyLength1 = True
    historyLength2 = True
    historyLength3 = True
    useS0B0Distance = True
    useS0S1Distance = True
    useStackLength = True

    enhanceMerge = False
    enableSingleMWE = False
    useLexic = False

    generateS1B1 = False

    NumOFSent = '### Number of Sentences: '
    NumOFMWEs = '\n### Number of MWEs: '
    NumOFEmbedded = '\n### Number of Embedded MWEs: '
    NumOFInterleaving = '\n### Number of Interleaving MWEs: '
    NumContinousMWEs = '\n### Number of Continous MWEs: '
    NumSingleWordMWEs = '\n### Number of Single Word MWEs: '

    def __init__(self, filePath, corpus=None):

        with open(filePath, 'r') as configFile:
            config = json.load(configFile)

            if len(filePath.split('/')) > 0:
                Paths.xpName = filePath.split('/')[-1].split('.')[0]
                Paths.configsFolder = filePath

            if "generateS1B1" in config.keys():
                FeatParams.generateS1B1 = config["generateS1B1"]

            if "enhanceMerge" in config.keys():
                FeatParams.enhanceMerge = config["enhanceMerge"]

            if "usePreciseDictionary" in config.keys():
                FeatParams.usePreciseDictionary = config["usePreciseDictionary"]

            if "useLexic" in config.keys():
                FeatParams.useLexic = config["useLexic"]

            if "enableSingleMWE" in config.keys():
                FeatParams.enableSingleMWE = config["enableSingleMWE"]

            FeatParams.useFirstBufferElement = config["useFirstBufferElement"]
            FeatParams.useSecondBufferElement = config["useSecondBufferElement"]

            FeatParams.usePOS = config["UseLinguistInfo"]["usePOS"]
            FeatParams.useLemma = config["UseLinguistInfo"]["useLemma"]
            FeatParams.useBiGram = config["UseLinguistInfo"]["useBiGram"]
            FeatParams.useTriGram = config["UseLinguistInfo"]["useTriGram"]

            FeatParams.useS0B0Distance = config["S0B0Distance"]
            FeatParams.useS0S1Distance = config["S0S1Distance"]
            FeatParams.useStackLength = config["useStackLength"]
            FeatParams.useSyntax = config["UseLinguistInfo"]["useSytax"]
            FeatParams.generateS0B2Bigram = config["generateS0B2Bigram"]

            FeatParams.useDictionary = config["useDictionary"]

            FeatParams.historyLength1 = config["useTransitionHistory"]["transitionHistoryLength1"]
            FeatParams.historyLength2 = config["useTransitionHistory"]["transitionHistoryLength2"]
            FeatParams.historyLength3 = config["useTransitionHistory"]["transitionHistoryLength3"]

        FeatParams.createXPFolder()
        FeatParams.createConfigAndReadMe(corpus)

    @staticmethod
    def createXPFolder():
        # xpFolder = Parameters.toBinary()
        if PrintParams.printReport:
            if not os.path.exists(Paths.xpPath):
                os.makedirs(Paths.xpPath)

    @staticmethod
    def createConfigAndReadMe(corpus):
        if PrintParams.printReport:
            staticParsingFile = open(os.path.join(Paths.xpPath, 'config.md'), 'w')
            staticParsingFile.write(FeatParams.toString())

            result = FeatParams.NumOFSent + str(corpus.sentNum) + FeatParams.NumOFMWEs + str(
                corpus.mweNum) + '\n' + FeatParams.NumOFEmbedded + str(
                corpus.emeddedNum) + '\n' + FeatParams.NumOFInterleaving + str(
                corpus.intereavingNum) + '\n' + FeatParams.NumContinousMWEs + str(
                corpus.continousExp) + '\n' + FeatParams.NumSingleWordMWEs + str(corpus.singleWordExp)
            printingPath = os.path.join(Paths.xpPath, 'Readme.md')
            staticParsingFile = open(printingPath, 'w')
            staticParsingFile.write(result)

    @staticmethod
    def toBinary():

        if Paths.configsFolder == '':
            return ''
        result = ''
        with open(Paths.configsFolder, 'r') as configFile:
            config = json.load(configFile)
            for key in config.keys():
                if isinstance(config[key], bool):
                    if config[key]:
                        result += '1'
                    else:
                        result += '0'
                elif isinstance(config[key], dict):
                    for subkey in config[key].keys():
                        if isinstance(config[key][subkey], bool):
                            if config[key][subkey]:
                                result += '1'
                            else:
                                result += '0'

        return result

    @staticmethod
    def toABC():

        if Paths.configsFolder == '':
            return ''
        idxs = 'ABCDEFGHIJKLMNOPQRST'
        result = ''
        with open(Paths.configsFolder, 'r') as configFile:
            config = json.load(configFile)
            idx = 0
            idxxx = 0
            # print 'Nmber of Keys: ', len(config.keys())
            for key in config.keys():
                if isinstance(config[key], bool):
                    # print  idxs[idxxx: idxxx  +1], key#, config[key]
                    if config[key]:
                        result += str(idxs[idx:idx + 1]) + ' ' + key + ' '
                    idx += 1
                    idxxx += 1
                elif isinstance(config[key], dict):
                    for subkey in config[key].keys():
                        if isinstance(config[key][subkey], bool):
                            # print idxs[idxxx: idxxx  +1], subkey #, config[key][subkey]
                            if config[key][subkey]:
                                result += str(idxs[idx:idx + 1]) + ' ' + subkey + ' '
                        idx += 1
                        idxxx += 1

        # print result
        return result

    @staticmethod
    def toString():
        if Paths.configsFolder == '':
            return ''
        result = ''
        with open(Paths.configsFolder, 'r') as configFile:
            config = json.load(configFile)
            for key in config.keys():
                if isinstance(config[key], bool):
                    result += str(key)
                    if config[key]:
                        result += ' = True\n\n'
                    else:
                        result += ' = False\n\n'

                elif isinstance(config[key], dict):
                    for subkey in config[key].keys():
                        if isinstance(config[key][subkey], bool):
                            result += str(subkey)
                            if config[key][subkey]:
                                result += ' = True\n\n'
                            else:
                                result += ' = False\n\n'
        return result


# for subdir, dirs, files in os.walk('Done'):
#     for dir in dirs:
#         for subdir1, dirs1, configFiles in os.walk(os.path.join('Done', dir)):
#             for configFile in configFiles:
#                 if not configFile.endswith('.json'):
#                     continue
#                 Paths.configsFolder = os.path.join(os.path.join('Done', dir), configFile)
#                 print FeatParams.toABC()

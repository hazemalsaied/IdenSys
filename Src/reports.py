import operator
import os
import logging
from param import FeatParams, XPParams, Paths,  PrintParams


class Report:
    @staticmethod
    def createRootResultFolder():

        initialValue = Paths.rootResultFolder
        if XPParams.baseline :
            Paths.rootResultFolder = os.path.join(Paths.rootResultFolder, 'Baseline')
        elif not XPParams.includeEmbedding and not XPParams.useAutoGeneratedDEP and not XPParams.useAutoGeneratedPOS and XPParams.useCrossValidation:
            Paths.rootResultFolder = os.path.join(Paths.rootResultFolder, 'Gold', 'CrossValidation')
        elif not XPParams.includeEmbedding and not XPParams.useAutoGeneratedDEP and not XPParams.useAutoGeneratedPOS and not XPParams.useCrossValidation:
            Paths.rootResultFolder = os.path.join(Paths.rootResultFolder, 'Gold', 'TestDataset')
        elif XPParams.includeEmbedding and XPParams.useAutoGeneratedPOS and XPParams.useCrossValidation:
            Paths.rootResultFolder = os.path.join(Paths.rootResultFolder, 'Auto', 'Embedding')
        elif not XPParams.includeEmbedding and XPParams.useAutoGeneratedPOS and not XPParams.useCrossValidation:
            Paths.rootResultFolder = os.path.join(Paths.rootResultFolder, 'Auto', 'TestDataset')
        elif not XPParams.includeEmbedding and XPParams.useAutoGeneratedPOS and XPParams.useCrossValidation:
            Paths.rootResultFolder = os.path.join(Paths.rootResultFolder, 'Auto', 'CrossValidation')
        elif  XPParams.includeEmbedding and  not XPParams.useAutoGeneratedDEP and  not XPParams.useAutoGeneratedPOS and XPParams.useCrossValidation:
            Paths.rootResultFolder = os.path.join(Paths.rootResultFolder, 'Gold', 'Embedding')
        if initialValue == Paths.rootResultFolder :
            raise Exception('Hazem : Contradictory parameters!')
        logging.warn('Root Result Folder: ' + Paths.rootResultFolder)
        if not os.path.exists(Paths.rootResultFolder):
            os.makedirs(Paths.rootResultFolder)

    @staticmethod
    def createLanguageFolder():

        Paths.langResultFolder = os.path.join(Paths.rootResultFolder, Paths.languageName)
        Paths.iterationPath = Paths.langResultFolder
        if not os.path.exists(Paths.langResultFolder):
            os.makedirs(Paths.langResultFolder)

        logging.info('Language Folder: ' + Paths.langResultFolder)


    @staticmethod
    def createMWELexic(dic, path = os.path.join(Paths.iterationPath, 'Dictionary.md')):
        if PrintParams.printReport:
            sortedDic = sorted(dic.items(), key=operator.itemgetter(1), reverse=True)

            result = ''
            for item in sortedDic:
                result += str(item[0]) + ': ' + str(item[1]) + '\n\n'
            dicFile = open(path, 'w')
            dicFile.write(result)

    @staticmethod
    def editReadme(mode, text):
        printingPath = os.path.join(Paths.iterationPath, 'Readme.md')
        staticParsingFile = open(printingPath, mode)
        staticParsingFile.write(text)

    @staticmethod
    def createStaticParsingReports(sents, crossValidationIdx=''):
        if not PrintParams.printReport:
            return
        sentsForPrinting = [s for s in sents if len(s.vMWEs) >= 2]
        sentsForPrinting = sorted(sentsForPrinting, key=lambda Sentence: len(Sentence.vMWEs), reverse=True)
        sentsForPrinting = sentsForPrinting[0:5]
        printingPath = os.path.join(Paths.iterationPath, 'StaticParsing' + str(crossValidationIdx) + '.md')
        staticParsingFile = open(printingPath, 'w')
        result = ''
        for sent in sentsForPrinting:
            result += str(sent)
        staticParsingFile.write(result)

    @staticmethod
    def createEmbeddingSentsReports(sents, crossValidationIdx=''):
        sentsForPrinting = [s for s in sents if Report.isEmbeddedSent(s)]

        sentsForPrinting = sorted(sentsForPrinting, key=lambda Sentence: len(Sentence.vMWEs), reverse=True)
        printingPath = os.path.join(Paths.iterationPath, 'EmbeddedSents' + str(crossValidationIdx) + '.md')
        staticParsingFile = open(printingPath, 'w')
        result = ''
        for sent in sentsForPrinting:
            result += str(sent)
        staticParsingFile.write(result)

    @staticmethod
    def isEmbeddedSent(sent):
        for mwe in sent.vMWEs:
            if mwe.isEmbedded or mwe.isInterleaving:
                return True
        return False

    @staticmethod
    def createParsingReport(testingSents, mweDictionary, crossValidationIdx=''):

        if not PrintParams.printReport:
            return

        # Adding the source of MWE
        for sent in testingSents:
            for mwe in sent.vMWEs:
                if mwe.getLemmaString() in mweDictionary.keys():
                    mwe.isInTrainingCorpus = mweDictionary[mwe.getLemmaString()]

        sentsForPrinting = [s for s in testingSents if len(s.vMWEs) >= 1]

        result = ''
        sentsForPrinting = sorted(sentsForPrinting, key=lambda Sentence: len(Sentence.vMWEs), reverse=True)
        printingPath = os.path.join(Paths.iterationPath, 'Parsing' + str(crossValidationIdx) + '.md')
        parsingFile = open(printingPath, 'w')

        for sent in sentsForPrinting[0:5]:
            result += str(sent)
        parsingFile.write(result)

        # Producing a long report
        printingPath = os.path.join(Paths.iterationPath, 'Parsing' + str(crossValidationIdx) + '-long.md')
        parsingFile = open(printingPath, 'w')
        result = ''
        for sent in sentsForPrinting:
            result += sent.printSummary()
        parsingFile.write(result)

    @staticmethod
    def editTotalReadMe(fScore, recall, precision, corpus, testSents, identifiedIntellegentillyPrecent=.0,
                        identifiedSemiIntellegentillyPercent=.0, path= os.path.join(Paths.rootResultFolder, 'results.csv') ):

        report = ''
        mwes, singleMWE, continousMWEs, interleavingMwes, embeddedMwes, identifiedMwes, identifiedSingleMWE, identifiedContinousMWEs = 0, 0, 0, 0, 0, 0, 0, 0,
        if XPParams.useCrossValidation:
            report = Paths.languageName + ',' + str("%.3f" % fScore) + ',' + str("%.3f" % recall) + ',' + str(
                "%.3f" % precision) + ',' + str("%.3f" % identifiedIntellegentillyPrecent) + ',' + str(
                "%.3f" % identifiedSemiIntellegentillyPercent) + ',-,-,' + ',' + FeatParams.toABC() + '\n'
        else:
            mwes, singleMWE, continousMWEs, interleavingMwes, embeddedMwes, identifiedMwes, identifiedSingleMWE, identifiedContinousMWEs = 0, 0, 0, 0, 0, 0, 0, 0,
            if len(testSents) > 0:
                mwes, singleMWE, continousMWEs, interleavingMwes, embeddedMwes = Report.getTestStatistics(testSents)
                identifiedMwes, identifiedSingleMWE, identifiedContinousMWEs = Report.getIdentifiedTestStatistics(
                    testSents)

            report = Paths.languageName + ',' + str("%.3f" % fScore) + ',' + str("%.3f" % recall) + ',' + str(
                "%.3f" % precision) + ','

            report += str(corpus.sentNum) + ',' + str(corpus.mweNum) + ',' + str(
                corpus.mweNum - corpus.continousExp) + ',' + str(corpus.intereavingNum) + ',' + str(
                corpus.singleWordExp) + ',' + str(corpus.emeddedNum) + ','
            report += str(mwes) + ',' + str(identifiedMwes) + ',' + str(singleMWE) + ',' + str(
                identifiedSingleMWE) + ','
            report += str(mwes - continousMWEs) + ',' + str(
                identifiedMwes - identifiedContinousMWEs) + ',' + FeatParams.toBinary() + '\n'
        mode = "a"
        if not os.path.exists(path):
            mode = "w+"
        with open(path, mode) as staticParsingFile:
            staticParsingFile.write(report)

    @staticmethod
    def getTestStatistics(sents):
        singleMWE = 0
        continousMWEs = 0
        interleavingMwes = 0
        embeddedMwes = 0
        mwes = 0
        for sent in sents:
            mwes += len(sent.vMWEs)
            for mwe in sent.vMWEs:
                if mwe.isInterleaving:
                    interleavingMwes += 1
                if mwe.isSingleWordExp:
                    singleMWE += 1
                if mwe.isContinousExp:
                    continousMWEs += 1
                if mwe.isEmbedded:
                    embeddedMwes += 1
                if mwe.isInterleaving:
                    embeddedMwes += 1
        return mwes, singleMWE, continousMWEs, interleavingMwes, embeddedMwes

    @staticmethod
    def getIdentifiedTestStatistics(sents):
        singleMWE = 0
        continousMWEs = 0
        mwes = 0
        for sent in sents:
            mwes += len(sent.identifiedVMWEs)
            for mwe in sent.identifiedVMWEs:
                if len(mwe.tokens) == 1:
                    singleMWE += 1
                if sent.isContinousMwe(mwe):
                    continousMWEs += 1

        return mwes, singleMWE, continousMWEs

    @staticmethod
    def createEvaluationFiles(sents):

        if not XPParams.useCrossValidation:
            if not XPParams.realExper:
                goldCorpus = ''
                for sent in sents:
                    goldCorpus += sent.getCorpusText() + '\n'
                path = os.path.join(Paths.iterationPath,  'gold.txt')
                wFile = open(path, 'w')
                wFile.write(goldCorpus)

            predCorpus = ''
            for sent in sents:
                predCorpus += sent.getCorpusText(gold=False) + '\n'
            if XPParams.realExper:
                path = os.path.join(Paths.iterationPath, 'test.system.parsemetsv')
            else:
                path = os.path.join(Paths.iterationPath, 'pred.txt')
            wFile = open(path, 'w')
            wFile.write(predCorpus)
